#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var program = require('commander');
var path = require('path');
var fs = require('fs');
var spawn = require('threads').spawn;
var Nemo = require('nemo3');
var Promise = require('bluebird');
var cwd = process.cwd();
var glob = require('glob');
var instance = require('../lib/instance');
var async = require('async');
var merge = require('lodash.merge');
var debug = require('debug');
var log = debug('nemo-runner:log');
var error = debug('nemo-runner:error');

function list(val) {
  return val.split(',');
}
function cwdPath(rel) {
  return path.resolve(cwd, rel);
}
program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
  .usage('[options]')
  .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
  .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
  .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
  // .option('-F, --file ', 'run parallel by file')
  .option('--debug-brk', 'enable node\'s debugger breaking on the first line')
  .option('--inspect', 'activate devtools in chrome')
  .option('--no-timeouts', 'remove timeouts in debug/inspect use case')
  .parse(process.argv);
program._name = 'nemo-runner';
Nemo.Configure(program.baseDirectory, {}).then(function (config) {
  var base = config.get('profiles:base');
  var profiles = program.profile;
  var greps = program.grep || '';
  var results = [];
  var profilesConf = [];
  var profileFns = [];
  profiles = (profiles instanceof Array) ? profiles : [profiles];
  greps = (greps instanceof Array) ? greps : [greps];
  profiles.forEach(function (profile) {
    greps.forEach(function (grep) {
      var profileConf = merge(merge({}, base), config.get(`profiles:${profile}`));
      var profileLabel = `profile: ${profile || 'default'}`;
      profileLabel = profileLabel + ((grep !== '') ? `, grep: ${grep}` : '');
      profileConf.profileLabel = profileLabel;
      if (!program.timeouts) {
        profileConf.mocha.timeout = 1200000;
      }
      if (grep !== '') {
        profileConf.mocha.grep = grep;
      }
      if (profileConf.mocha && profileConf.mocha.reporterOptions && profileConf.mocha.reporterOptions.reportFilename && grep !== '') {
        // customize report filename
        profileConf.mocha.reporterOptions.reportFilename = `${profileConf.mocha.reporterOptions.reportFilename}.${grep}`;
      }
      profilesConf.push(profileConf);
    });
  });
  let res, rej;
  new Promise(function (resolve, reject) {
    res = resolve;
    rej = reject;
  }).then(function kickoff() {
    async.parallel(profileFns, function (err, profileConfs) {
      var complete = 0;
      if (err) {
        error(err);
        process.exit();
      }
      log('result of async', profileConfs);
      if (profileConfs.length === 1) {
        // TODO: the below doesn't work. not sure we can move env vars up to parent process
        // process.env = Object.assign({}, process.env, profileConfs[0].env || {});
        return instance({basedir: program.baseDirectory, profile: profileConfs[0] || 'default'});
      }
      // parallel use case
      profileConfs.forEach(function (profileConf) {
        // var kv = {};
        // Object.keys(process.env).forEach(function ())
        var thread = spawn(instance, {env: Object.assign({}, process.env, profileConf.env || {})});

        thread
          .send({basedir: program.baseDirectory, profile: profileConf})
          // The handlers come here: (none of them is mandatory)
          .on('message', function (summary) {
            log('Thread complete', summary);
            results.push(summary);
            thread.kill();
          })
          .on('error', function (er) {
            error(er);
          })
          .on('exit', function () {
            var totals;
            complete = complete + 1;
            thread.removeAllListeners('message');
            thread.removeAllListeners('error');
            thread.removeAllListeners('exit');
            if (complete === profileConfs.length) {
              totals = {label: 'TOTAL', total: 0, pass: 0, fail: 0};
              log('Everything done, shutting down the thread pool.');
              results.forEach(function (result) {
                totals.total = totals.total + result.total;
                totals.pass = totals.pass + result.pass;
                totals.fail = totals.fail + result.fail;
              });
              results.push(totals);
              /* eslint-disable */
              console.log(results);
              /* eslint-enable */
            }
          });
      });
    });
  });
  let pAssembler = function (pconf, index, arr) {
    profileFns.push(function (cb) {
      var testFileGlob = path.resolve(program.baseDirectory, pconf.tests);
      glob(testFileGlob, {}, function (err, files) {
        if (err) {
          return cb(err);
        }
        pconf.tests = files;
        cb(null, pconf);
      });
    });
    if (index === arr.length - 1) {
      res();
    }
  };
  if (base.parallel && base.parallel === 'file') {
    pAssembler = function (pconf) {
      var testFileGlob = path.resolve(program.baseDirectory, pconf.tests);
      glob(testFileGlob, {}, function (err, files) {
        files.forEach(function (file) {
          var justFile = file.split(program.baseDirectory)[1];
          justFile = justFile.replace(/\//g, '-');
          profileFns.push(function (cb) {
            // var testFileGlob = path.resolve(program.baseDirectory, pconf.tests);
            var _pconf = merge({}, pconf);
            _pconf.tests = [file];
            if (_pconf.mocha && _pconf.mocha.reporterOptions && _pconf.mocha.reporterOptions.reportFilename) {
              _pconf.mocha.reporterOptions.reportFilename += `.${justFile}`;
            }
            _pconf.profileLabel += `, file: ${justFile}`;
            cb(null, _pconf);
          });
        });
        res();
      });
    };
  }
  profilesConf.forEach(pAssembler);





});
